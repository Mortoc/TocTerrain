#pragma kernel CSMain
#pragma enable_d3d11_debug_symbols

#include "Packages/com.mortoc.terrain/Runtime/Shaders/GeneratedVertex.cs.hlsl"

// Input
float4x4 Transform;
StructuredBuffer<float3> VertsIn;
StructuredBuffer<float3> NormsIn;
StructuredBuffer<float2> UVsIn;
StructuredBuffer<uint> IndicesIn;
uint TriangleCount;

// Output
RWStructuredBuffer<GeneratedVertex> VertsOut;
RWStructuredBuffer<uint> DrawArgs;


[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= TriangleCount)
    {
        return;
    }
    
    uint triIdx = id.x * 3;

    float3 threadColor = lerp(
        float3(0.95, 0.05, 0.0),
        float3(0.05, 0.95, 0.0),
        id.x / (float)TriangleCount
    );
    uint3 vertIdx = uint3(
        IndicesIn[triIdx + 0],
        IndicesIn[triIdx + 1],
        IndicesIn[triIdx + 2]
    );

    uint outIdx = triIdx;
    VertsOut[outIdx + 0].Position = VertsIn[vertIdx.x];
    VertsOut[outIdx + 0].Normal = NormsIn[vertIdx.x];
    VertsOut[outIdx + 0].Color = threadColor;
    VertsOut[outIdx + 0].UV = UVsIn[vertIdx.x];
    
    VertsOut[outIdx + 1].Position = VertsIn[vertIdx.y];
    VertsOut[outIdx + 1].Normal = NormsIn[vertIdx.y];
    VertsOut[outIdx + 1].Color = threadColor;
    VertsOut[outIdx + 1].UV = UVsIn[vertIdx.y];
    
    VertsOut[outIdx + 2].Position = VertsIn[vertIdx.z];
    VertsOut[outIdx + 2].Normal = NormsIn[vertIdx.z];
    VertsOut[outIdx + 2].Color = threadColor;
    VertsOut[outIdx + 2].UV = UVsIn[vertIdx.z];

    InterlockedAdd(DrawArgs[1], 1u);
}
