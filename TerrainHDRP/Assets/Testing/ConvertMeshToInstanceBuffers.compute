#pragma kernel CSMain
#pragma enable_d3d11_debug_symbols

#include "Packages/com.mortoc.terrain/Runtime/Shaders/GeneratedVertex.cs.hlsl"

// Input
float4x4 Transform;
StructuredBuffer<float3> VertsIn;
StructuredBuffer<float3> NormsIn;
StructuredBuffer<float2> UVsIn;
StructuredBuffer<uint> IndicesIn;
uint TriangleCount;

// Output
RWStructuredBuffer<GeneratedVertex> VertsOut;
RWStructuredBuffer<uint> DrawArgs;

GeneratedVertex TransformVert(in float3 pos, in float3 norm, in float3 color, in float2 uv)
{
    GeneratedVertex v;
    v.Position = mul(Transform, float4(pos, 1.0)).xyz;
    v.Normal = mul(Transform, float4(norm, 0.0)).xyz;
    // v.Position = pos;
    // v.Normal = norm;
    v.Color = color;
    v.UV = uv;
    return v;    
}


[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= TriangleCount)
    {
        return;
    }
    
    uint triIdx = id.x * 3;

    float3 threadColor = lerp(
        float3(0.95, 0.05, 0.0),
        float3(0.05, 0.95, 0.0),
        id.x / (float)TriangleCount
    );
    uint3 vertIdx = uint3(
        IndicesIn[triIdx + 0],
        IndicesIn[triIdx + 1],
        IndicesIn[triIdx + 2]
    );

    uint outIdx = triIdx;
    VertsOut[outIdx + 0] = TransformVert(
        VertsIn[vertIdx.x], 
        NormsIn[vertIdx.x], 
        threadColor, 
        UVsIn[vertIdx.x]
    );
    VertsOut[outIdx + 1] = TransformVert(
        VertsIn[vertIdx.y], 
        NormsIn[vertIdx.y], 
        threadColor, 
        UVsIn[vertIdx.y]
    );
    VertsOut[outIdx + 2] = TransformVert(
        VertsIn[vertIdx.z], 
        NormsIn[vertIdx.z], 
        threadColor, 
        UVsIn[vertIdx.z]
    );
    InterlockedAdd(DrawArgs[1], 1u);
}
